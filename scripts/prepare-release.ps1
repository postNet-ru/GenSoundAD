# PowerShell —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ä–µ–ª–∏–∑—É Ring Generator
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\scripts\prepare-release.ps1 [version]

param(
    [string]$Version = "1.0.0"
)

Write-Host "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–ª–∏–∑–∞ Ring Generator v$Version" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞" -ForegroundColor Red
    exit 1
}

Write-Host "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Yellow

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Rust
try {
    $rustVersion = rustc --version
    Write-Host "‚úÖ Rust: $rustVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Rust –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Tauri CLI
try {
    cargo tauri --version | Out-Null
    Write-Host "‚úÖ Tauri CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tauri CLI..." -ForegroundColor Yellow
    cargo install tauri-cli
}

Write-Host "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Yellow
npm ci

Write-Host "üéØ –ó–∞–≥—Ä—É–∑–∫–∞ FFmpeg..." -ForegroundColor Yellow
if (Test-Path "scripts\download-ffmpeg.ps1") {
    & ".\scripts\download-ffmpeg.ps1"
} else {
    Write-Host "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    Write-Host "   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FFmpeg —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ src-tauri\binaries\" -ForegroundColor Yellow
}

Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript..." -ForegroundColor Yellow
try {
    npm run type-check
    Write-Host "‚úÖ TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ TypeScript" -ForegroundColor Red
    throw
}

Write-Host "üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω—Ç–µ—Ä–∞..." -ForegroundColor Yellow
try {
    npm run lint
    Write-Host "‚úÖ –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ª–∏–Ω—Ç–µ—Ä–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..." -ForegroundColor Yellow
}

Write-Host "üèóÔ∏è  –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..." -ForegroundColor Yellow
npm run build

Write-Host "üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ Tauri..." -ForegroundColor Yellow
npm run tauri build -- --debug

Write-Host "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤..." -ForegroundColor Yellow
$bundleDir = "src-tauri\target\debug\bundle"
if (Test-Path $bundleDir) {
    Get-ChildItem -Path $bundleDir -Recurse -Include "*.exe", "*.msi" | ForEach-Object {
        $size = [math]::Round($_.Length / 1MB, 2)
        Write-Host "   üì¶ $($_.Name): ${size} MB" -ForegroundColor Cyan
    }
}

Write-Host "‚úÖ –†–µ–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä–∫–µ!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Cyan
Write-Host "   1. –î–ª—è —Å–±–æ—Ä–∫–∏ production –≤–µ—Ä—Å–∏–∏: npm run tauri:build" -ForegroundColor White
Write-Host "   2. –î–ª—è —Å–±–æ—Ä–∫–∏ –ø–æ–¥ Windows: npm run build:windows" -ForegroundColor White
Write-Host "   3. –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –≤ src-tauri\target\release\bundle\" -ForegroundColor White
